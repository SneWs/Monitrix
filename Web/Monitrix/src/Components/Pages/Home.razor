@page "/"
@using Monitrix.MonitoringClient
@using Monitrix.System.Models
@using global::System.Threading

<PageTitle>Overview</PageTitle>

@inject MonitrixHttpClient HttpApi

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudText Typo="Typo.h3" Class="mb-6">System Overview</MudText>
    
    <MudGrid>
        <MudItem xs="12" md="6" lg="4">
            <MudPaper Class="pa-6" Elevation="4">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <!-- CPU Usage Gauge -->
                    <MudStack AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h5">CPU Usage</MudText>
                        <div style="position: relative; border: 3px solid var(--mud-palette-divider); border-radius: 50%; background-color: var(--mud-palette-surface); width: 200px; height: 200px;">
                            <MudProgressCircular 
                                Color="@GetCpuUsageColor(_cpuSnapshot.CpuUsage.TotalUsagePercentage)"
                                Size="Size.Large" 
                                Indeterminate="false" 
                                Value="@((int)_cpuSnapshot.CpuUsage.TotalUsagePercentage)"
                                StrokeWidth="8"
                                Style="width: 190px; height: 190px; position: absolute; top: 3px; left: 3px;" />
                            
                            <!-- Centered percentage text -->
                            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                                <MudText Typo="Typo.h4" Style="font-weight: bold;">
                                    @($"{_cpuSnapshot.CpuUsage.TotalUsagePercentage:F1}%")
                                </MudText>
                            </div>
                        </div>
                        
                        <!-- Speed Information -->
                        <MudText Typo="Typo.body2" Class="text-center">
                            @($"{_cpuSnapshot.CpuUsage.CurrentSpeedMhz:F0} MHz / {_cpuSnapshot.CpuUsage.CpuSpeedMhz:F0} MHz")
                        </MudText>
                    </MudStack>

                    <MudDivider />

                    <!-- CPU Information -->
                    <MudStack Spacing="3" Style="width: 100%;">
                        <MudText Typo="Typo.h6" Class="mb-2">CPU Information</MudText>
                        
                        <MudStack Spacing="2">
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Model:</MudText>
                                <MudText Typo="Typo.body2">@_cpuSnapshot.CpuInfo.ModelName</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Vendor:</MudText>
                                <MudText Typo="Typo.body2">@_cpuSnapshot.CpuInfo.VendorId</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Architecture:</MudText>
                                <MudText Typo="Typo.body2">@_cpuSnapshot.CpuInfo.Architecture</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Cores:</MudText>
                                <MudText Typo="Typo.body2">@_cpuSnapshot.CpuInfo.CoreCount</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Threads:</MudText>
                                <MudText Typo="Typo.body2">@_cpuSnapshot.CpuInfo.ThreadCount</MudText>
                            </div>

                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Max Speed:</MudText>
                                <MudText Typo="Typo.body2">@_cpuSnapshot.CpuInfo.CpuSpeedMhz</MudText>
                            </div>
                        </MudStack>
                    </MudStack>
                    
                    <!-- Per-Core Usage -->
                    @if (_cpuSnapshot.CpuUsage.PerCoreUsagePercentage.Any())
                    {
                        <MudDivider />
                        <MudStack Spacing="2" Style="width: 100%;">
                            <MudText Typo="Typo.h6">Per-Core Usage</MudText>
                            @for (int i = 0; i < _cpuSnapshot.CpuUsage.PerCoreUsagePercentage.Count; i++)
                            {
                                var coreUsage = _cpuSnapshot.CpuUsage.PerCoreUsagePercentage[i];
                                var coreIndex = i;
                                <div class="d-flex align-center gap-3">
                                    <MudText Typo="Typo.body2" Style="min-width: 60px; font-weight: 500;">
                                        Core @(coreIndex + 1):
                                    </MudText>
                                    <MudProgressLinear 
                                        Color="@GetCpuUsageColor(coreUsage)" 
                                        Value="coreUsage" 
                                        Class="flex-grow-1" 
                                        Rounded="true" />
                                    <MudText Typo="Typo.body2" Style="min-width: 50px; text-align: right;">
                                        @($"{coreUsage:F1}%")
                                    </MudText>
                                </div>
                            }
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="4">
            <MudPaper Class="pa-6" Elevation="4">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <!-- Memory Usage Gauge -->
                    <MudStack AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h5">Memory Usage</MudText>
                        <div style="position: relative; border: 3px solid var(--mud-palette-divider); border-radius: 50%; background-color: var(--mud-palette-surface); width: 200px; height: 200px;">
                            <MudProgressCircular 
                                Color="@GetMemoryUsageColor(_ramUsage.UsedPercentage)"
                                Size="Size.Large" 
                                Indeterminate="false" 
                                Value="@((int)_ramUsage.UsedPercentage)"
                                StrokeWidth="8"
                                Style="width: 190px; height: 190px; position: absolute; top: 3px; left: 3px;" />
                            
                            <!-- Centered percentage text -->
                            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                                <MudText Typo="Typo.h4" Style="font-weight: bold;">
                                    @($"{_ramUsage.UsedPercentage:F1}%")
                                </MudText>
                            </div>
                        </div>
                        
                        <!-- Total Memory Information -->
                        <MudText Typo="Typo.body2" Class="text-center">
                            @($"{FormatBytes(_ramUsage.TotalBytes)} Total")
                        </MudText>
                    </MudStack>

                    <MudDivider />

                    <!-- Memory Information -->
                    <MudStack Spacing="3" Style="width: 100%;">
                        <MudText Typo="Typo.h6" Class="mb-2">Memory Information</MudText>
                        
                        <MudStack Spacing="2">
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Used:</MudText>
                                <MudText Typo="Typo.body2">@FormatBytes(_ramUsage.UsedBytes)</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Free:</MudText>
                                <MudText Typo="Typo.body2">@FormatBytes(_ramUsage.FreeBytes)</MudText>
                            </div>
                            
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">Total:</MudText>
                                <MudText Typo="Typo.body2">@FormatBytes(_ramUsage.TotalBytes)</MudText>
                            </div>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        @if (_gpuSnapshot.GpuUsage.Any())
        {
            <MudItem xs="12" md="6" lg="4">
                <MudPaper Class="pa-6" Elevation="4">
                    <MudStack AlignItems="AlignItems.Center" Spacing="4">
                        <!-- GPU Usage Gauge (First GPU) -->
                        <MudStack AlignItems="AlignItems.Center" Spacing="2">
                            <MudText Typo="Typo.h5">GPU Usage</MudText>
                            <div style="position: relative; border: 3px solid var(--mud-palette-divider); border-radius: 50%; background-color: var(--mud-palette-surface); width: 200px; height: 200px;">
                                <MudProgressCircular 
                                    Color="@GetGpuUsageColor(_gpuSnapshot.GpuUsage[0].CoreUsedPercentage)"
                                    Size="Size.Large" 
                                    Indeterminate="false" 
                                    Value="@((int)_gpuSnapshot.GpuUsage[0].CoreUsedPercentage)"
                                    StrokeWidth="8"
                                    Style="width: 190px; height: 190px; position: absolute; top: 3px; left: 3px;" />
                                
                                <!-- Centered percentage text -->
                                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                                    <MudText Typo="Typo.h4" Style="font-weight: bold;">
                                        @($"{_gpuSnapshot.GpuUsage[0].CoreUsedPercentage:F1}%")
                                    </MudText>
                                </div>
                            </div>
                            
                            <!-- GPU Model -->
                            <MudText Typo="Typo.body2" Class="text-center">
                                @(_gpuSnapshot.GpuUsage[0].Model ?? "Unknown GPU")
                            </MudText>
                        </MudStack>

                        <MudDivider />

                        <!-- GPU Information -->
                        @for (int i = 0; i < _gpuSnapshot.GpuInfo.Count; i++)
                        {
                            var gpuInfo = _gpuSnapshot.GpuInfo[i];
                            var gpuUsage = i < _gpuSnapshot.GpuUsage.Count ? _gpuSnapshot.GpuUsage[i] : null;
                            
                            <MudStack Spacing="3" Style="width: 100%;">

                                <MudStack Spacing="2">
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.body2" Style="font-weight: 500;">Model:</MudText>
                                        <MudText Typo="Typo.body2">@(gpuInfo.Model ?? "Unknown")</MudText>
                                    </div>
                                    
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.body2" Style="font-weight: 500;">Vendor:</MudText>
                                        <MudText Typo="Typo.body2">@(gpuInfo.Vendor ?? "Unknown")</MudText>
                                    </div>
                                    
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.body2" Style="font-weight: 500;">Total Memory:</MudText>
                                        <MudText Typo="Typo.body2">@FormatBytes((ulong)gpuInfo.MemorySizeInMB * 1024 * 1024)</MudText>
                                    </div>
                                    
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.body2" Style="font-weight: 500;">Cores:</MudText>
                                        <MudText Typo="Typo.body2">@gpuInfo.CoreCount</MudText>
                                    </div>

                                    @if (gpuUsage != null)
                                    {
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Style="font-weight: 500;">Core Usage:</MudText>
                                            <MudText Typo="Typo.body2">@($"{gpuUsage.CoreUsedPercentage:F1}%")</MudText>
                                        </div>
                                        
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Style="font-weight: 500;">Memory Used:</MudText>
                                            <MudText Typo="Typo.body2">@FormatBytes((ulong)gpuUsage.MemoryUsedInMB * 1024 * 1024)</MudText>
                                        </div>
                                        
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Style="font-weight: 500;">Memory Usage:</MudText>
                                            <MudText Typo="Typo.body2">@($"{gpuUsage.MemoryUsedPercentage:F1}%")</MudText>
                                        </div>
                                    }
                                </MudStack>
                            </MudStack>
                            
                            @if (i < _gpuSnapshot.GpuInfo.Count - 1)
                            {
                                <MudDivider />
                            }
                        }
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" md="6" lg="4">
                <MudPaper Class="pa-6" Elevation="4">
                    <MudStack AlignItems="AlignItems.Center" Spacing="4">
                        <MudText Typo="Typo.h5">GPU Usage</MudText>
                        <div style="position: relative; border: 3px solid var(--mud-palette-divider); border-radius: 50%; background-color: var(--mud-palette-surface); width: 200px; height: 200px;">
                            <MudProgressCircular 
                                Color="@GetGpuUsageColor(0)"
                                Size="Size.Large" 
                                Indeterminate="false" 
                                Value="0"
                                StrokeWidth="8"
                                Style="width: 190px; height: 190px; position: absolute; top: 3px; left: 3px;" />
                        </div>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }

        <MudItem xs="12" md="12" lg="12">
            <MudPaper Class="pa-6" Elevation="4">
                <MudStack Spacing="4">
                    <!-- Processes Header -->
                    <MudStack AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h5">Running Processes</MudText>
                        <MudText Typo="Typo.body2" Class="text-center">
                            @($"{_processes.Count} processes running")
                        </MudText>
                    </MudStack>

                    <MudDivider />

                    <!-- Processes List -->
                    @if (_processes.Any())
                    {
                        <MudStack Spacing="2" Style="width: 100%; max-height: 400px; overflow-y: auto;">
                            <MudText Typo="Typo.h6">Process List</MudText>
                            @foreach (var process in _processes)
                            {
                                <div class="d-flex align-center gap-3" style="padding: 8px; border-bottom: 1px solid var(--mud-palette-divider);">
                                    <MudText Typo="Typo.body2" Style="min-width: 60px; font-weight: 500;">
                                        @process.Id
                                    </MudText>
                                    <MudText Typo="Typo.body2" Style="min-width: 200px; flex-grow: 1;">
                                        @process.Name
                                    </MudText>
                                    <MudStack Spacing="1" Style="min-width: 120px;">
                                        <MudProgressLinear 
                                            Color="@GetCpuUsageColor(process.CpuUsage)" 
                                            Value="process.CpuUsage" 
                                            Rounded="true" 
                                            Size="Size.Small" />
                                        <MudText Typo="Typo.caption" Style="text-align: center;">
                                            CPU: @($"{process.CpuUsage:F1}%")
                                        </MudText>
                                    </MudStack>
                                    <MudStack Spacing="1" Style="min-width: 120px;">
                                        <MudProgressLinear 
                                            Color="@GetMemoryUsageColor(process.MemoryUsage)" 
                                            Value="process.MemoryUsage" 
                                            Rounded="true" 
                                            Size="Size.Small" />
                                        <MudText Typo="Typo.caption" Style="text-align: center;">
                                            RAM: @($"{FormatBytes((ulong)process.MemoryUsage * 1000000)}")
                                        </MudText>
                                    </MudStack>
                                </div>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="text-center">
                            No processes found
                        </MudText>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    private CpuSnapshotModel _cpuSnapshot = new();
    private GpuSnapshotModel _gpuSnapshot = new();
    private RamUsageModel _ramUsage = new();
    private List<ProcessInfoModel> _processes = new();
    private Timer _refreshTimer = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadCpuInfoAsync(true);
        await LoadRamUsageAsync(true);
        await LoadGpuInfo(true);
        await LoadProcesses(true);

        _refreshTimer = new Timer(async _ => await ReloadStatsAsync(), null, 0, 3000);

        await base.OnInitializedAsync();
    }

    private async Task ReloadStatsAsync()
    {
        await LoadCpuInfoAsync(true);
        await LoadRamUsageAsync(true);
        await LoadGpuInfo(true);
        await LoadProcesses(true);

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadProcesses(bool isFirstLoad = false)
    {
        var processes = await HttpApi.GetProcessesOverview();
        _processes = processes ?? new List<ProcessInfoModel>();
        _processes = _processes.OrderByDescending(x => x.MemoryUsage)
            .ThenByDescending(p => p.CpuUsage)
            .ToList();

        await InvokeAsync(() => {
            if (!isFirstLoad)
                StateHasChanged();
        });
    }

    private async Task LoadGpuInfo(bool isFirstLoad = false)
    {
        var gpuSnapshot = await HttpApi.GetGpuUsageAsync();
        if (gpuSnapshot != null)
        {
            _gpuSnapshot = gpuSnapshot;
            await InvokeAsync(() =>
            {
                if (!isFirstLoad)
                    StateHasChanged();
            });
        }
    }

    private async Task LoadCpuInfoAsync(bool isFirstLoad = false)
    {
        var cpuSnapshot = await HttpApi.GetCpuSnapshotAsync();
        if (cpuSnapshot != null)
        {
            _cpuSnapshot = cpuSnapshot;
            await InvokeAsync(() => {
                if (!isFirstLoad)
                    StateHasChanged();
            });
        }
    }

    private async Task LoadRamUsageAsync(bool isFirstLoad = false)
    {
        var ramUsage = await HttpApi.GetRamUsageAsync();
        if (ramUsage != null)
        {
            _ramUsage = ramUsage;
            await InvokeAsync(() => {
                if (!isFirstLoad)
                    StateHasChanged();
            });
        }
    }

    private Color GetCpuUsageColor(double usage)
    {
        return usage switch
        {
            <= 30 => Color.Success,
            <= 69 => Color.Warning,
            <= 90 => Color.Error,
            _ => Color.Error
        };
    }

    private Color GetMemoryUsageColor(double usage)
    {
        return usage switch
        {
            <= 60 => Color.Success,
            <= 79 => Color.Warning,
            <= 90 => Color.Error,
            _ => Color.Error
        };
    }

    private Color GetGpuUsageColor(double usage)
    {
        return usage switch
        {
            <= 30 => Color.Success,
            <= 69 => Color.Warning,
            <= 90 => Color.Error,
            _ => Color.Error
        };
    }

    private string FormatBytes(ulong bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024.0:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024.0 * 1024.0):F1} MB";
        return $"{bytes / (1024.0 * 1024.0 * 1024.0):F1} GB";
    }
}

